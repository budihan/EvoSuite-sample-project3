/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 17 20:26:03 GMT 2022
 */

package com.zetcode;

import org.junit.Test;
import static org.junit.Assert.*;
import com.zetcode.Board;
import java.awt.event.ActionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom(1643);
      Board board0 = new Board();
      ActionEvent actionEvent0 = new ActionEvent(board0, 1643, "f");
      board0.actionPerformed(actionEvent0);
      assertFalse(board0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Random.setNextRandom((-1282));
      Board board0 = new Board();
      board0.actionPerformed((ActionEvent) null);
      assertFalse(board0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Board board0 = new Board();
      ActionEvent actionEvent0 = new ActionEvent(board0, (-690), "", (-690), (-690));
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      board0.actionPerformed(actionEvent0);
      assertFalse(board0.isFocusTraversalPolicySet());
  }
}
